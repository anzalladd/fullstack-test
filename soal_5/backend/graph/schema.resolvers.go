package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"

	"github.com/qraphql-services/graph/model"
)

// AddProduct is the resolver for the addProduct field.
func (r *mutationResolver) AddProduct(ctx context.Context, input model.ProductInput) (*model.Product, error) {
	product, err := r.Resolver.AddProduct(ctx, input)

	if err != nil {
		return nil, err
	}

	return product, nil
}

// EditProduct is the resolver for the editProduct field.
func (r *mutationResolver) EditProduct(ctx context.Context, id string, input model.ProductInput) (*model.Product, error) {
	product, err := r.Resolver.EditProduct(ctx, id, input)

	if err != nil {
		return nil, err
	}

	return product, nil
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	product, err := r.Resolver.DeleteProduct(ctx, id)

	if err != nil {
		return false, err
	}

	return product, nil
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, id string) (*model.Product, error) {
	product, err := r.Resolver.GetProduct(ctx, string(id))

	if err != nil {
		return nil, err
	}

	return product, nil
}

// ListProducts is the resolver for the listProducts field.
func (r *queryResolver) ListProducts(ctx context.Context, category *string, limit *int32) ([]*model.Product, error) {
	var intLimit int
	if limit != nil {
		intLimit = int(*limit)
	}

	products, err := r.Resolver.ListProducts(ctx, category, &intLimit)
	if err != nil {
		return nil, err
	}

	return products, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
